import { Resend } from 'resend'
import { env } from './env'

const resend = new Resend(env.RESEND_API_KEY)

export interface BugReportEmailData {
  type: 'bug' | 'feature'
  title: string
  description: string
  userEmail: string
  screenshotUrl?: string
  priority: 'low' | 'medium' | 'high' | 'critical'
  reportId: string
}

export async function sendBugReportEmail(data: BugReportEmailData) {
  if (!env.RESEND_API_KEY) {
    console.warn('RESEND_API_KEY not configured, skipping email send')
    return { success: false, error: 'Email service not configured' }
  }

  try {
    const { data: emailData, error } = await resend.emails.send({
      from: 'Life Stacks <noreply@lifestacks.ai>',
      to: [env.BUG_REPORT_EMAIL || 'joeyhendrickson@me.com'],
      subject: `[${data.type.toUpperCase()}] ${data.title}`,
      html: generateBugReportHTML(data),
      text: generateBugReportText(data),
    })

    if (error) {
      console.error('Error sending bug report email:', error)
      return { success: false, error: error.message }
    }

    console.log('Bug report email sent successfully:', emailData?.id)
    return { success: true, messageId: emailData?.id }
  } catch (error) {
    console.error('Error in sendBugReportEmail:', error)
    return { success: false, error: 'Failed to send email' }
  }
}

function generateBugReportHTML(data: BugReportEmailData): string {
  const priorityColors = {
    low: '#10B981',
    medium: '#F59E0B',
    high: '#EF4444',
    critical: '#DC2626',
  }

  const typeColors = {
    bug: '#EF4444',
    feature: '#3B82F6',
  }

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Bug Report - ${data.title}</title>
      <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center; }
        .content { background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px; }
        .badge { display: inline-block; padding: 4px 12px; border-radius: 20px; font-size: 12px; font-weight: 600; text-transform: uppercase; }
        .priority-badge { background: ${priorityColors[data.priority]}; color: white; }
        .type-badge { background: ${typeColors[data.type]}; color: white; }
        .field { margin-bottom: 20px; }
        .field-label { font-weight: 600; color: #555; margin-bottom: 5px; }
        .field-value { background: white; padding: 15px; border-radius: 8px; border-left: 4px solid #667eea; }
        .screenshot { max-width: 100%; border-radius: 8px; margin-top: 10px; }
        .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #6b7280; font-size: 14px; }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>üêõ Life Stacks ${data.type === 'bug' ? 'Bug Report' : 'Feature Request'}</h1>
        <p>New ${data.type} submitted from Life Stacks</p>
      </div>
      
      <div class="content">
        <div class="field">
          <div class="field-label">Report ID</div>
          <div class="field-value">${data.reportId}</div>
        </div>

        <div class="field">
          <div class="field-label">Type & Priority</div>
          <div class="field-value">
            <span class="badge type-badge">${data.type}</span>
            <span class="badge priority-badge">${data.priority}</span>
          </div>
        </div>

        <div class="field">
          <div class="field-label">Title</div>
          <div class="field-value">${data.title}</div>
        </div>

        <div class="field">
          <div class="field-label">Description</div>
          <div class="field-value">${data.description.replace(/\n/g, '<br>')}</div>
        </div>

        <div class="field">
          <div class="field-label">Submitted by</div>
          <div class="field-value">${data.userEmail}</div>
        </div>

        ${
          data.screenshotUrl
            ? `
        <div class="field">
          <div class="field-label">Screenshot</div>
          <div class="field-value">
            <img src="${data.screenshotUrl}" alt="Screenshot" class="screenshot" />
          </div>
        </div>
        `
            : ''
        }

        <div class="field">
          <div class="field-label">Submitted at</div>
          <div class="field-value">${new Date().toLocaleString()}</div>
        </div>
      </div>

      <div class="footer">
        <p>This report was automatically generated by Life Stacks</p>
        <p>Reply to this email to respond to the user</p>
      </div>
    </body>
    </html>
  `
}

function generateBugReportText(data: BugReportEmailData): string {
  return `
Life Stacks ${data.type === 'bug' ? 'Bug Report' : 'Feature Request'}

Report ID: ${data.reportId}
Type: ${data.type.toUpperCase()}
Priority: ${data.priority.toUpperCase()}
Title: ${data.title}

Description:
${data.description}

Submitted by: ${data.userEmail}
Submitted at: ${new Date().toLocaleString()}

${data.screenshotUrl ? `Screenshot: ${data.screenshotUrl}` : ''}

---
This report was automatically generated by Life Stacks
Reply to this email to respond to the user
  `.trim()
}
